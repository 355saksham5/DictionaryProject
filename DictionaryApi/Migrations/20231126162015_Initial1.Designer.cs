// <auto-generated />
using System;
using DictionaryApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DictionaryApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231126162015_Initial1")]
    partial class Initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Antonyms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicWordDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Antonyms");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.BasicWordDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultDefinition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultPhoneticsText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPronounceLnkPresent")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDefinitions")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicWordDetails");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.DefinitionDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicWordDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefinitionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PartOfSpeechId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartOfSpeechId");

                    b.ToTable("Definitions");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.PartOfSpeech", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartOfSpeech");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.PhoneticDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicWordDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PronounceLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhoneticAudios");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Synonyms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasicWordDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Synonyms");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Words", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AntonymsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SynonymsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AntonymsId");

                    b.HasIndex("SynonymsId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.DefinitionDto", b =>
                {
                    b.HasOne("DictionaryApi.Models.DTOs.PartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechId");

                    b.Navigation("PartOfSpeech");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Words", b =>
                {
                    b.HasOne("DictionaryApi.Models.DTOs.Antonyms", null)
                        .WithMany("Antonym")
                        .HasForeignKey("AntonymsId");

                    b.HasOne("DictionaryApi.Models.DTOs.Synonyms", null)
                        .WithMany("Synonym")
                        .HasForeignKey("SynonymsId");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Antonyms", b =>
                {
                    b.Navigation("Antonym");
                });

            modelBuilder.Entity("DictionaryApi.Models.DTOs.Synonyms", b =>
                {
                    b.Navigation("Synonym");
                });
#pragma warning restore 612, 618
        }
    }
}
